/* =======================================
 * FEUILLE DE STYLES DES GABARITS HTML/CSS
 * © Florens Verschelde pour Elephorm & Alsacreations.com
 * Licence: https://creativecommons.org/licenses/by/2.0/fr/
 * ======================================= */

/*
	Note: vous pouvez modifier simplement les couleurs de ce gabarit en
	modifiant uniquement les couleurs de fond (propriétés background-color)
	et les couleurs du texte (propriété color).
*/

/* Général */

html {
	/* Ceci est une variable CSS, qui peut être réutilisée plusieurs fois dans
	la feuille de styles via la fonction 'var()'. Les variables CSS s'appliquent
	sur un ou plusieurs éléments de la page HTML, et elles sont héritées par les
	descendants de ces éléments. Par convention, on définit les variables que
	l'on souhaite utiliser n'importe où sur l'élément racine (html). */
	--largeur-contenu-centre: 860px;

	/* La couleur de fond s'applique sur toute la page. Mais comme plusieurs
	conteneurs de la page ont leur propre couleur de fond, celle-ci se verra
	surtout en bas de page. */
	color: #f0e39e;
	background-color: #181a12;
}

a {
	color: #ff6533;
}

a:hover,
a:focus {
	color: #ff4c00;
}

strong {
	color: #a1b55d;
}

/* Mise en page */

.centre {
	/* On limite la largeur des conteneurs qui portent la classe "centre",
	et on utilise des marges automatiques à gauche et à droite pour centrer
	le tout horizontalement. À noter: on utiliser 'max-width' et pas 'width',
	pour que ces conteneurs puissent prendre une largeur plus réduite sur
	de petits écrans (tablettes ou smartphones par exemples). */
	max-width: var(--largeur-contenu-centre);
	margin-left: auto;
	margin-right: auto;
}

/* En-tête */

#entete {
	padding: 20px;
	background-color: #2c2f22;
}

#entete > .centre {
	/* Pour le contenu de l'en-tête, on souhaite placer l'image à gauche et le
	texte dans une deuxième colonne. On peut utiliser le mode de rendu CSS
	"flexbox", avec 'display: flex'. Celui-ci fonctionne en deux directions:
	soit en colonne ('column', vertical) on en ligne ('row', horizontal).
	Ici,on commence par définir un style en colonne, qui va disposer les éléments
	enfants les uns sous les autres verticalement. Le résultat sera presque le
	même que si on avait utilisé 'display: block', à la nuance près que la
	propriété 'gap' va rajouter des espaces verticaux entre les éléments.
	Mais quid de l'affichage en deux colonnes? Eh bien, on va le définir un peu
	plus loin, dans une condition ciblant les écrans suffisamment larges. */
	display: flex;
	flex-direction: column;
	gap: 20px;
}

/* On utilise une règle '@media' (ou "media query") pour appliquer un style
de manière conditionnelle. Ici le style s'appliquera si la largeur de la
fenêtre du navigateur est égale ou supérieure à 500 pixels. On peut aussi
écrire cette condition comme: '@media (min-width: 500px)'. */
@media (width >= 500px) {
	#entete > .centre {
		flex-direction: row;
		align-items: center;
	}
}

#entete img {
	display: block;
	flex-shrink: 0;
	background-color: #fff;
	box-shadow: 0 1px 4px #0008;
}

#entete h1 {
	margin: 0;
	font-size: 2rem;
	line-height: 1.2;

	/* Depuis 2023, il est aussi possible d'imbriquer des règles '@media' ou
	des sélécteurs CSS à l'intérieur du bloc de déclarations d'un sélecteur
	parent. Ici, cela nous permet d'éviter de répéter le sélecteur '#entete h1'
	à l'intérieur de la règle '@media (width > 500px)'.

	Attention cependant, les versions de navigateurs plus anciennes que 2023
	vont ignorer le code suivant! Cela peut être un problème, sur un ancien
	navigateur qui n'a pas été mis à jour (par exemple sur vieux smartphone ou
	une tablette qui ne bénéficie plus de mises à jour système).
	Vous pouvez vérifier depuis quand une fonctionalité CSS en faisant une
	recherche sur https://caniuse.com/
	*/
	@media (width >= 500px) {
		font-size: 2.4rem;
	}
}

#entete p {
	margin: 4px 0;
}

/* Menu de navigation */

#navigation {
	padding: 12px;
	background-color: #181a12;
}

#navigation ul {
	/* Pour la liste de liens du menu, on va aussi utiliser "flexbox",
	mais cette fois directement en mode horizontal. Sur les petits écrans,
	les liens du menu ne tiendront peut-être pas dans la largeur. Dans ce cas,
	grâce à la déclaration 'flex-wrap: wrap', ils pourront passer à la ligne,
	au lieu de dépasser de leur conteneur. */
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	align-items: center;
	gap: 4px;
	/* Cet élément porte déjà la classe "centre" qui définit une largeur
	maximum de 'var(--largeur-contenu-centre)'. Cela donne un résultat correct,
	mais on peut améliorer le résult visuel légèrement. En effet, cette liste
	contient des liens qui ont un padding horizontal de 10px. Si on souhaite
	que le texte du premier lien soit aligné verticalement avec l'image de
	l'en-tête et avec le texte du contenu principal, on peut augmenter légèrement
	la largeur maximale de la liste de liens, en rajoutant la largeur du padding
	des liens. C'est aussi l'occasion de montrer la fonction CSS 'calc'! */
	max-width: calc(var(--largeur-contenu-centre) + 20px);
	margin: 0 auto;
	list-style: none;
}

#navigation a {
	display: block;
	padding: 6px 10px;
	border-radius: 4px;
	line-height: 1.5;
	text-decoration: none;
	color: #ff6533;
}

#navigation a:hover,
#navigation a:focus {
	background-color: #000000;
}

/* Contenu principal */

#contenu {
	padding: 20px;
	color: #363b29;
	background-color: #cbd888;
}

#contenu > .centre > :first-child {
	margin-top: 0;
}

#contenu p,
#contenu li {
	line-height: 1.5;
}

#contenu a {
	color: #332510;
}

#contenu a:hover,
#contenu a:focus {
	color: #6e5122;
}

#contenu strong {
	color: #181a12;
}

/* Pied de page */

#pied {
	padding: 15px 20px;
	color: #e6a948;
}

#pied p {
	margin: 0.5em 0;
	font-size: 0.8rem;
	line-height: 1.5;
}
