/* =======================================
 * FEUILLE DE STYLES DES GABARITS HTML/CSS
 * © Florens Verschelde pour Elephorm & Alsacreations.com
 * Licence: https://creativecommons.org/licenses/by/2.0/fr/
 * ======================================= */

/* Page */

body {
	/* Gestion de la largeur maximale du contenu */
	--largeur-max-body: 600px;

	/*
	Ces deux variables CSS nous permettent de gérer l'alignement du contenu
	de l'en-tête avec les autres blocs de la page.
	1. Par défaut, sur un petit écran, les principaux blocs de la page (en-tête,
		navigation, contenu) vont toucher les bords de l'écran, et le padding
		horizontal du body sera donc de zéro. L'en-tête a donc besoin d'un padding
		horizontal pour que son contenu ne touche pas les bords directement.
	2. Sur un écran plus large, tous les blocs de contenu seront affichés en
		retrait des bords de la page, avec un padding sur le body. Dans ce cas,
		le padding du header ne sera plus nécessaire, et on pourra le mettre à
		zéro pour avoir un meilleur alignement visuel.
	Les lignes suivantes définissent le premier cas de figure. Cherchez un peu
	plus loin dans la feuille de styles l'endroit où ces deux variables sont
	redéfinies pour le deuxième cas de figure.
	*/
	--padding-inline-body: 0px;
	--padding-inline-conteneur: 20px;

	/* Largeur maximale, et centrage horizontal avec les marges automatiques */
	max-width: var(--largeur-max-body);
	margin-inline: auto;
	padding-inline: var(--padding-inline-body);

	/* Hauteur minimale de la page. L'unité CSS 'vh' représente 1% de la hauteur
	de la zone de visualisation du navigateur ("viewport"). Donc '100vh'
	représente 100% de cette hauteur. */
	min-height: 100vh;

	/*
	On utilise l'élément <body> comme le conteneur principal de la page,
	et on utilise le mode de mise en page en grille ("CSS Grid") pour gérer
	les espaces à l'intérieur de ce conteneur. En particulier, ce qui nous
	intéresse ici c'est de s'assurer que le contenu principal aura une hauteur
	dynamique qui va remplir 100% de l'espace vertical disponible.
	On crée donc une grille CSS avec une seule colonne et 4 lignes.
	Chaque ligne a une hauteur automatique ('auto'), sauf la troisième qui a une
	hauteur de '1fr' (une fraction de l'espace disponible).
	*/
	display: grid;
	grid-template-columns: 1fr;
	grid-template-rows: auto auto 1fr auto;

	/*
	Ce n'est pas indispensable ici, mais pour mieux controler l'insertion
	des blocs de contenu (enfants de <body>) dans la grille, on peut nommer
	les différentes zones de la grille. Ici on donne un nom à 4 zones
	correspondant à nos 4 lignes de contenu. On pourra spécifier dans quelle
	zone un contenu doit s'insérer avec la propriété CSS 'grid-area'.
	*/
	grid-template-areas: "entete" "navigation" "contenu" "pied";
}

/*
Dans certains cas de figures, en particulier sur les navigateurs mobiles
dont l'interface change lorsque l'on fait défiler une page, la hauteur de la
zone de visualisation du navigateur ("viewport") peut changer. Ces
navigateurs traitent alors '100vh' comme la plus petite hauteur possible.
Cela pose un problème lorsqu'un contenu a une hauteur fixée à '100vh': cette
hauteur peut être plus courte que l'espace disponible dans certains cas.
Pour répondre à ce problème, les spécifications CSS ont créé l'unité 'dvh'
("dynamic viewport height"), qui n'est pas fixe mais se met à jour lorsque
l'interface du navigateur change.

Il vaut donc mieux utiliser 'min-height: 100dvh' que 'min-height: 100vh'
pour un résultat exact. Ici, pour gérer le cas de figure où un ancien
navigateur ne connait pas la nouvelle unité 'dvh', on utilise la règle
CSS '@supports', qui permet d'appliquer un style lorsque la déclaration CSS
entre parenthèses est comprise par le navigateur.
*/
@supports (min-height: 100dvh) {
	body {
		min-height: 100dvh;
	}
}

@media (width >= 800px) {
	body {
		--largeur-max-body: 800px;
		--padding-inline-body: 20px;
		--padding-inline-conteneur: 0px;
		padding-block: 20px 40px;
	}
}

/* En-tête */

#entete {
	/* Pour la mise en page de cet en-tête avec "flexbox",
	voir les explications dans modele01.css */
	display: flex;
	flex-direction: column;
	gap: 20px;
	padding-block: 20px;
	padding-inline: var(--padding-inline-conteneur);

	@media (width >= 600px) {
		flex-direction: row;
		align-items: center;
	}
}

#entete img {
	display: block;
	flex-shrink: 0;
	background-color: #fff;
	box-shadow: 0 1px 4px #0008;
}

#entete h1 {
	margin: 0;
	font-size: 2rem;
	line-height: 1.2;

	@media (width >= 600px) {
		font-size: 2.4rem;
	}
}

#entete p {
	margin: 4px 0;
}

/* Navigation */

#navigation {
	grid-area: navigation;
	background-color: var(--fond-plus-sombre);
}

#navigation ul {
	/* Pour la mise en page de ce menu avec "flexbox",
	voir les explications dans modele01.css */
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	align-items: center;
	/* La proprité justify-content permet de centrer horizontalement
	les enfants de ce conteneur. */
	justify-content: center;
	margin: 0;
	padding: 12px 10px;
	gap: 4px;
	list-style: none;
}

#navigation a {
	display: block;
	padding: 6px 10px;
	border-radius: 4px;
	line-height: 1.5;
	text-decoration: none;
	color: var(--texte-clair-lien);
}

#navigation a:hover,
#navigation a:focus {
	background-color: #000;
}

/* Contenu principal */

#contenu {
	grid-area: contenu;
	padding: 20px;
	color: var(--texte-sombre);
	background-color: var(--fond-clair);
}

#contenu details > summary {
	cursor: pointer;
	text-decoration-line: underline;
	text-decoration-style: dashed;
	text-align: center;
}

#contenu p,
#contenu li {
	line-height: 1.5;
}

/* Pied de page */

#pied {
	grid-area: pied;
	padding-block: 15px;
	padding-inline: var(--padding-inline-conteneur);
	font-size: 0.85em;
	color: var(--texte-clair-secondaire);
}

#pied p {
	margin: 0.5em 0;
}
