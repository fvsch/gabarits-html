/* =======================================
 * FEUILLE DE STYLES DES GABARITS HTML/CSS
 * © Florens Verschelde pour Elephorm & Alsacreations.com
 * Licence: https://creativecommons.org/licenses/by/2.0/fr/
 * ======================================= */

/*
	Note: vous pouvez modifier simplement les couleurs de ce gabarit en
	modifiant uniquement les couleurs de fond (propriétés background-color)
	et les couleurs du texte (propriété color).
*/

/* Général */

html {
	color: #f0e39e;
	background: #2c2f22;
}

body {
	/* On utilise l'élément <body> comme le conteneur principal de la page,
	et on utilise le mode de mise en page en grille ("CSS Grid") pour gérer
	les espaces à l'intérieur de ce conteneur. En particulier, ce qui nous
	intéresse ici c'est de s'assurer que le contenu principal aura une hauteur
	dynamique qui va remplir 100% de l'espace vertical disponible.
	On crée donc une grille CSS avec une seule colonne et 4 lignes.
	Chaque ligne a une hauteur automatique ('auto'), sauf la troisième qui a une
	hauteur de '1fr' (une fraction de l'espace disponible). */
	display: grid;
	grid-template-columns: 1fr;
	grid-template-rows: auto auto 1fr auto;

	/* Ce n'est pas indispensable ici, mais pour mieux controler l'insertion
	des blocs de contenu (enfants de <body>) dans la grille, on peut nommer
	les différentes zones de la grille. Ici on donne un nom à 4 zones
	correspondant à nos 4 lignes de contenu. On pourra spécifier dans quelle
	zone un contenu doit s'insérer avec la propriété CSS 'grid-area'. */
	grid-template-areas: "entete" "navigation" "contenu" "pied";

	/* L'unité CSS 'vh' représente 1% de la hauteur de la zone de visualisation
	du navigateur ("viewport"). Donc '100vh' représente 100% de cette hauteur. */
	min-height: 100vh;

	/* Largeur maximale, et centrage horizontal avec les marges automatiques */
	max-width: 760px;
	margin-inline: auto;

	/* Dans certains cas de figures, en particulier sur les navigateurs mobiles
	dont l'interface change lorsque l'on fait défiler une page, la hauteur de la
	zone de visualisation du navigateur ("viewport") peut changer. Ces
	navigateurs traitent alors '100vh' comme la plus petite hauteur possible.
	Cela pose un problème lorsqu'un contenu a une hauteur fixée à '100vh': cette
	hauteur peut être plus courte que l'espace disponible dans certains cas.
	Pour répondre à ce problème, les spécifications CSS ont créé l'unité 'dvh'
	("dynamic viewport height"), qui n'est pas fixe mais se met à jour lorsque
	l'interface du navigateur change.

	Il vaut donc mieux utiliser 'min-height: 100dvh' que 'min-height: 100vh'
	pour un résultat exact. Ici, pour gérer le cas de figure où un ancien
	navigateur ne connait pas la nouvelle unité 'dvh', on utilise la règle
	CSS '@supports', qui permet d'appliquer un style lorsque la déclaration CSS
	entre parenthèses est comprise par le navigateur.
	*/
	@supports (min-height: 100dvh) {
		min-height: 100dvh;
	}
}

a {
	color: #ff6533;
}

a:hover,
a:focus {
	color: #ff4c00;
}

strong {
	color: #a1b55d;
}

/* En-tête */

#entete {
	/* Pour la mise en page de cet en-tête avec "flexbox",
	voir les explications dans modele01.css */
	display: flex;
	flex-direction: column;
	gap: 20px;
	padding: 20px;

	@media (width >= 500px) {
		flex-direction: row;
		align-items: center;
		padding-inline: 0;
	}
}

#entete img {
	display: block;
	flex-shrink: 0;
}

#entete h1 {
	margin: 0;
	font-size: 2rem;
	line-height: 1.2;

	@media (width >= 500px) {
		font-size: 2.4rem;
	}
}

/* Navigation */

#navigation {
	grid-area: navigation;
	background-color: #181a12;
}

#navigation ul {
	/* Pour la mise en page de ce menu avec "flexbox",
	voir les explications dans modele01.css */
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	align-items: center;
	/* La proprité justify-content permet de centrer horizontalement
	les enfants de ce conteneur. */
	justify-content: center;
	margin: 0;
	padding: 12px 10px;
	gap: 4px;
	list-style: none;
}

#navigation a {
	display: block;
	padding: 6px 10px;
	border-radius: 4px;
	line-height: 1.5;
	text-decoration: none;
	color: #ff6533;
}

#navigation a:hover,
#navigation a:focus {
	background-color: #000000;
}

/* Contenu principal */

#contenu {
	grid-area: contenu;
	padding: 20px;
	color: #363b29;
	background: #cbd888;
}

#contenu details > summary {
	cursor: pointer;
	text-decoration-line: underline;
	text-decoration-style: dashed;
	text-align: center;
}

#contenu p,
#contenu li {
	line-height: 1.5;
}

#contenu a {
	color: #332510;
}

#contenu a:hover,
#contenu a:focus {
	color: #6e5122;
}

#contenu strong {
	color: #181a12;
}

/* Pied de page */

#pied {
	grid-area: pied;
	padding: 15px 20px;
	font-size: 0.85em;
	color: #e6a948;
}

#pied p {
	margin: 0.5em 0;
}
