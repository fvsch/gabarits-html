/* =======================================
 * FEUILLE DE STYLES DES GABARITS HTML/CSS
 * © Florens Verschelde pour Elephorm & Alsacreations.com
 * Licence: https://creativecommons.org/licenses/by/2.0/fr/
 * ======================================= */

/* Page */

body {
	/* Gestion du padding du body et de l'en-tête:
	voir les explications dans modele03.css */
	--largeur-max-body: 600px;
	--padding-body: 0px;
	--padding-entete: 20px;

	/* On limite la largeur maximale des contenus de la page, et on centre
	le tout horizontalement avec les marges automatiques */
	max-width: var(--largeur-max-body);
	margin-inline: auto;
	padding: var(--padding-body);

	/* On souhaite utiliser les "container queries" (règle '@container')
	pour que les enfants du conteneur 'body' (en particulier '#centre') puissent
	décider de leur propre mise en page en fonction de la largeur disponible
	dans leur parent. */
	container-type: inline-size;
}

@media (width >= 1000px) {
	body {
		--largeur-max-body: 1080px;
		--padding-body: 0px 40px;
		--padding-entete: 30px 0px;
	}
}

/* En-tête */

#entete {
	grid-area: entete;
	display: flex;
	flex-direction: column;
	gap: 20px;
	padding: var(--padding-entete);

	@media (width >= 600px) {
		flex-direction: row;
		align-items: center;
	}
}

#entete img {
	display: block;
	flex-shrink: 0;
	background-color: #fff;
	box-shadow: 0 1px 4px #0008;
}

#entete h1 {
	margin: 0;
	font-size: 2rem;
	line-height: 1.2;

	@media (width >= 600px) {
		font-size: 2.4rem;
	}
}

#entete p {
	margin: 4px 0;
}

/* Navigation */

#navigation {
	grid-area: navigation;
	container-type: inline-size;
	color: var(--texte-clair);

	/* Les variables CSS de couleur utilisées dans cette mise en page sont
	définies dans base.css */
	background-color: var(--fond-plus-sombre);
}

#navigation ul {
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	align-items: center;
	gap: 4px;
	margin: 0;
	padding: 12px 10px;
	list-style: none;
}

#navigation a {
	display: block;
	padding: 8px 12px;
	border-radius: 4px;
	line-height: 1.5;
	text-decoration: none;
	color: var(--texte-clair-lien);
}

#navigation a:hover,
#navigation a:focus {
	background-color: #000;
}

/* Bloc central (mise en page en 2 colonnes) */

#centre {
	color: var(--texte-clair);
	background-color: var(--fond-plus-sombre);
}

@container (width >= 860px) {
	#centre {
		/* On utilise Flexbox avec une disposition en ligne ('row') pour créer
		deux colonnes */
		display: flex;
		flex-direction: row;
		align-items: stretch;
		gap: 10px;
	}

	#centre > #principal {
		/*
		Dans cet exemple, on essaie de donner à la première colonne une largeur
		de 65%, et à la seconde une largeur de 35%.

		Flexbox propose un algorithme parfois complexe pour gérer l'espace
		pris par chaque enfant de l'élément parent ayant un 'display: flex'.
		Pour chaque enfant, on peut gérer:

		1. Sa dimension (ici la largeur) de base avec 'flex-basis'. Par défaut,
			elle est définie à 'auto', c'est-à-dire que le navigateur essaie de
			donner à l'élément la largeur nécessaire pour son contenu.
		2. Avec 'flex-grow': le nombre de parts d'espace restant qui vont être
			distribuées à l'élément. S'il y a plusieurs éléments enfants qui ont
			tous un 'flex-grow' à '1', l'espace restant sera distribué également.
		3. Avec 'flex-shrink', on contrôle si la largeur de l'élément peut être
			réduite si jamais l'espace restant est négatif.

		Les combinaisons possibles entre ces propriétés demanderaient un cours
		complet, donc on s'arrêtera là pour l'instant.
		*/
		flex-basis: 65%;
		flex-grow: 1;
		flex-shrink: 1;
	}

	#centre > #secondaire {
		min-width: 280px;
		flex-basis: 35%;
		flex-grow: 0;
		flex-shrink: 0;
	}
}

/* Contenu principal */

#principal {
	padding: 20px;
	color: var(--texte-sombre);
	background-color: var(--fond-clair);
}

#principal > :first-child {
	margin-top: 0;
}

#principal p,
#principal li {
	line-height: 1.5;
}

/* Contenu secondaire */

#secondaire {
	padding: 20px;
}

#secondaire > :first-child {
	margin-top: 0;
}

#secondaire p,
#secondaire li {
	line-height: 1.5;
}

#copyright {
	margin-top: 30px;
	font-size: 0.75rem;
	text-align: left;
	color: var(--texte-clair-secondaire);
}
