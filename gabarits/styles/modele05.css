/* =======================================
 * FEUILLE DE STYLES DES GABARITS HTML/CSS
 * © Florens Verschelde pour Elephorm & Alsacreations.com
 * Licence: https://creativecommons.org/licenses/by/2.0/fr/
 * ======================================= */

/* Page */

body {
	/* Gestion de la largeur maximale du contenu */
	--largeur-max-body: 600px;

	/* Gestion du padding du body et de l'en-tête.
	(Voir les explications détaillées dans modele03.css.) */
	--padding-body: 0px;
	--padding-entete: 20px;

	/* Centrage horizontal du contenu avec une largeur maximale
	et des marges automatiques */
	max-width: var(--largeur-max-body);
	margin-inline: auto;
	padding: var(--padding-body);

	/*
	Nous allons réaliser la mise en page principale avec une grille CSS, et
	quatre zones nommées ("entete", "navigation", "contenu" et "pied").
	Par défaut, on commence par définir ces zones et les règles de création des
	lignes et colonnes. Par convention on commence par les styles les plus
	simples, qui sont souvent ceux pour les mobiles et autres petits écrans.
	Ici, on définit une seule colonne de pleine largeur ('1fr'), et quatre
	zones nommées dans 4 lignes séparées. Les contenus s'afficheront donc
	les uns sous les autres.
	*/
	display: grid;
	grid-template-areas: "entete" "navigation" "contenu" "pied";
	grid-template-columns: 1fr;
}

@media (width >= 860px) {
	body {
		--largeur-max-body: 1200px;
		--padding-body: 0px 40px 40px;
		--padding-entete: 30px 0px;
	}

	/* On continue la définition de notre grille de mise en page, mais cette
	fois pour les écrans plus larges (860px et plus). */
	body.navigation-gauche {
		/* On souhaite une mise en page en deux colonnes, avec une première
		colonne de largeur fixe une autre de largeur variable: */
		grid-template-columns: 240px 1fr;
		/* On rédéfinit aussi nos 4 zones nommées, en gardant les mêmes noms
		(afin que les contenus placés avec 'grid-area' trouvent automatiquement
		leur place dans la grille redéfinie).
		- Chaque chaine de caractères placée entre guillemets correspond à une
			ligne de la grille.
		- On remarquera que deux zones sont sont définies comme occupant plusieurs
			"cellules" de la grille: "entete" sur deux colonnes, et "navigation"
			sur deux lignes.
		*/
		grid-template-areas:
			/* Première ligne: zone "entete" sur 2 colonnes */
			"entete entete"
			/* Deuxième ligne: zone "navigation" sur la première colonne, et "contenu" sur la seconde */
			"navigation contenu"
			/* Troisième ligne: zone "navigation" (à nouveau) sur la
				première colonne, et zone "pied" sur la seconde */
			"navigation pied";
		/* On souhaite que chaque ligne prenne la hauteur de son contenu, sauf la
	 	ligne du milieu ("navigation contenu") qui peut s'étendre en hauteur.
		Ce sera surtout utile si la navigation est haute et le contenu court. */
		grid-template-rows: auto 1fr auto;

		/* On ajoute une goutière de 20px entre colonnes uniquement */
		gap: 0px 20px;
	}

	/* Style similaire aux lignes ci-dessus, mais avec la zone "navigation"
	placée à droite */
	body.navigation-droite {
		grid-template-columns: 1fr 240px;
		grid-template-areas:
			"entete entete"
			"contenu navigation"
			"pied navigation";
		grid-template-rows: auto 1fr auto;
		gap: 0px 20px;
	}
}

/* En-tête */

#entete {
	/* Un conteneur peut être à la fois enfant d'une grille CSS… */
	grid-area: entete;

	/* … et aussi définir une mise en page en grille ou flexbox pour ses
	propres enfants. (Pour la mise en page de cet en-tête avec "flexbox",
	voir les explications dans modele01.css.) */
	display: flex;
	flex-direction: column;
	gap: 20px;
	padding: var(--padding-entete);

	@media (width >= 600px) {
		flex-direction: row;
		align-items: center;
	}
}

#entete img {
	display: block;
	flex-shrink: 0;
	background-color: #fff;
	box-shadow: 0 1px 4px #0008;
}

#entete h1 {
	margin: 0;
	font-size: 2rem;
	line-height: 1.2;

	@media (width >= 600px) {
		font-size: 2.4rem;
	}
}

#entete p {
	margin: 4px 0;
}

/* Navigation */

#navigation {
	/* Ce conteneur doit être affiché dans la zone "navigation" de la grille
	CSS parente (définie avec 'grid-template-areas', 'grid-template-columns'
	et 'grid-template-rows'). */
	grid-area: navigation;

	/* Pour la mise en page de la liste des liens, nous allons utiliser les
	"container queries". Pour cela, nous devons définir ce conteneur comme
	étant l'espace de référence pour les conditions de dimensions (hauteur et
	largeur) de ses enfants et descendants. Pour cela on utilise la propriété
	CSS 'container-type'. */
	container-type: inline-size;

	/* Les variables CSS de couleur utilisées dans cette mise en page sont
	définies dans base.css */
	background-color: var(--fond-plus-sombre);
}

#navigation ul {
	/* Par défaut, on affiche les liens en colonne, c'est à dire les uns sous
	les autres. (On pourrait réaliser le même affichage avec 'display: block',
	mais passer directement en Flexbox nous permet de faire varier l'affichage
	en changeant juste la valeur de 'flex-direction'.) */
	display: flex;
	flex-direction: column;
	gap: 4px;
	margin: 0;
	padding: 20px 10px;
	list-style: none;

	/* Lorsque l'espace horizontal disponible pour la liste de liens et de au
	moins 320px, on affiche les liens comme une liste horizontale. */
	@container (width >= 320px) {
		flex-direction: row;
		flex-wrap: wrap;
		align-items: center;
		padding-block: 10px;
	}
}

#navigation a {
	display: block;
	padding: 8px 12px;
	border-radius: 4px;
	line-height: 1.5;
	text-decoration: none;
	color: var(--texte-clair-lien);
}

#navigation a:hover,
#navigation a:focus {
	background-color: #000;
}

/* Contenu principal */

#contenu {
	grid-area: contenu;
	padding: 20px;
	color: var(--texte-sombre);
	background-color: var(--fond-clair);
}

#contenu > :first-child {
	margin-top: 0;
}

#contenu p,
#contenu li {
	line-height: 1.5;
}

#contenu figure img {
	border-radius: 4px;
}

#contenu figcaption {
	font-size: 90%;
	text-align: center;
}

/* Pied de page */

#pied {
	grid-area: pied;
	padding: 20px;
	font-size: 0.75rem;
	line-height: 1.5;
	color: var(--texte-clair-secondaire);
	background-color: var(--fond-plus-sombre);
}

#pied > * {
	margin-block: 0;
}

#pied > * + * {
	margin-top: 0.5em;
}
